LIBRARY ieee; 
USE ieee.std_logic_1164.all; 
USE ieee.std_logic_signed.all; 

ENTITY Project2 IS 
    PORT ( DIN : IN STD_LOGIC_VECTOR(15 DOWNTO 0); 
           Resetn, Clock, Run : IN STD_LOGIC; 
           Done : BUFFER STD_LOGIC; 
           BusWires : BUFFER STD_LOGIC_VECTOR(15 DOWNTO 0)); 
END Project3; 

ARCHITECTURE Behavior OF Project3 IS 
signal Rin,Rout,B: std_logic_vector(0 to 15);
signal Clear,high:std_logic;
signal Ain,Gin,Gout,IRin,DINout:std_logic;
signal Tstep_Q:std_logic_vector(1 downto 0);
signal T,I,X,Y:std_logic_vector(0 to 3);
signal R0,R1,R2,R3,R4,R5,R6,R7,R0out,R1out,R2out,R3out,R4out,R5out,R6out,R7out,DINo,Go:STD_LOGIC_VECTOR(15 downto 0);
signal A,G,ALU:std_logic_vector(15 downto 0);
signal Func,IR:std_logic_vector(1 to 9);
Component OR10
Port(IN1,IN2,IN3,IN4,IN5,IN6,IN7,IN8,IN9,IN10:IN STD_LOGIC_VECTOR(0 TO 15);OUT1:OUT STD_LOGIC_VECTOR(0 TO 15));
END COMPONent;
...dilonete components 
...dilonete signals 

BEGIN 
  High <= '1'; 
  Clear <= Reset OR Done or(not Run and T(0));
  Tstep: upcount PORT MAP (Clear, Clock, Tstep_Q);
  Func<=F & Rx & Ry;
  IRin<= Run and T(0);
  IRfunc: regn Generic map (N=>9) port map(Func,IRin,Clock,IR);
  I <= IR(1 TO 3);
  decX: dec3to8 PORT MAP (IR(4 TO 6), High, Xreg);--3 se 8 rin 8 bit to idio p kato
  decY: dec3to8 PORT MAP (IR(7 TO 9), High, Yreg);
  
  
  

	-- Instruction Table
	--  000: mv			Rx,Ry
	--  001: mvi		Rx,#D
	--  010: and        Rx,Ry	
	--  011: or         Rx,Ry	
	--  100: add		Rx,Ry				: Rx <- [Rx] + [Ry]
	--  101: sub		Rx,Ry				: Rx <- [Rx] - [Ry]
	--  110: xor        Rx,Ry	
	--  111: not        Rx,Ry
	-- 	OPCODE format: III XXX YYY, where 
	-- 	III = instruction, XXX = Rx, and YYY = Ry. For mvi,
	-- 	a second word of data is loaded from DIN
  controlsignals: PROCESS (Tstep_Q, I, Xreg, Yreg) 

  BEGIN 
  Extern='0'; Done='0'; Ain='0'; DINout='0'; Aluop='000'
  Gin='0'; Gout='0'; Rin='00000000'; Rout='00000000';
    CASE Tstep_Q IS 
   
      WHEN "00" =>  --store DIN in IR as long as Tstep_Q = 0 
        IRin <= '1'; 
      WHEN "01" =>  --define signals in time step T1 
        CASE I IS 
            when "000" => Rout<=Yreg;Rin<=Xreg;Done<='1';
			when "001"=> DINout<='1' Rin<=Xreg;Done<='1';
			when others=> Rout<=Xreg; Ain<='1';
        ... 

        END CASE; 
      WHEN "10" =>  --define signals in time step T2 
        CASE I IS 
		when "000"=>
		when "001"=>
		when others=> Rout<=Yreg; Aluop<=I; Gin<='1';

        ... 

        END CASE; 
      WHEN "11" =>  --define signals in time step T3 
        CASE I IS 
			when "000"=>
			when "001"=>
			when others Gout<='1'; Rin<=Xreg; Done<='1';
        ... 

        END CASE; 
    END CASE; 
  END PROCESS; 
  B='0000000000000000'
  reg_0: regn PORT MAP (BusWires, Rin(0), Clock, R0);
  reg_1: regn port map (BusWires, Rin(1), Clock, R1);
  reg_2: regn port map (BusWires, Rin(2), Clock, R2);
  reg_3: regn port map (BusWires, Rin(3), Clock, R3);
  reg_4: regn port map (BusWires, Rin(4), Clock, R4);
  reg_5: regn port map (BusWires, Rin(5), Clock, R5);
  reg_6: regn port map (BusWires, Rin(6), Clock, R6);
  reg_7: regn port map (BusWires, Rin(7), Clock, R7);
  regG: regn port map(ALU,Gin,Clock,G);		
  regA: regn port map(BusWires,Ain,Clock,A);
  mux0: mux2to1 port map(Rout(0),R0,B,R0out);
  mux1: mux2to1 port map(Rout(1),R1,B,R1out);
  mux2: mux2to1 port map(Rout(2),R2,B,R2out);
  mux3: mux2to1 port map(Rout(3),R3,B,R3out);
  mux4: mux2to1 port map(Rout(4),R4,B,R4out);
  mux5: mux2to1 port map(Rout(5),R5,B,R5out);
  mux6: mux2to1 port map(Rout(6),R6,B,R6out);
  mux7: mux2to1 port map(Rout(7),R7,B,R7out);
  muxD: mux2to1 port map(DINout,DIN,B,DINo);
  muxG: mux2to1 port map(Gout,G,B,Go);
  mux: OR10 port map(R0out,R1out,R2out,R3out,R4out,R5out,R6out,R7out,DINo,Go,BusWires);
  alu_: alu port map(A,BusWires,Aluop,ALU);

END Behavior; 